// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_social_firebase/test/src/features/feed/data/repositories/post_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_social_firebase/src/features/common/data/datasources/remote_datasource.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i2.RemoteDataSource {
  @override
  _i3.Future<String> addDocument({
    required String? collectionPath,
    required Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDocument,
          [],
          {
            #collectionPath: collectionPath,
            #data: data,
          },
        ),
        returnValue: _i3.Future<String>.value(''),
        returnValueForMissingStub: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  _i3.Future<void> updateDocument({
    required String? collectionPath,
    required String? documentId,
    required Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDocument,
          [],
          {
            #collectionPath: collectionPath,
            #documentId: documentId,
            #data: data,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<List<T>> getCollection<T>({
    required String? collectionPath,
    required _i2.ObjectMapper<T>? objectMapper,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCollection,
          [],
          {
            #collectionPath: collectionPath,
            #objectMapper: objectMapper,
          },
        ),
        returnValue: _i3.Future<List<T>>.value(<T>[]),
        returnValueForMissingStub: _i3.Future<List<T>>.value(<T>[]),
      ) as _i3.Future<List<T>>);
  @override
  _i3.Future<T?> getDocument<T>({
    required String? collectionPath,
    required String? documentId,
    required _i2.ObjectMapper<T>? objectMapper,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDocument,
          [],
          {
            #collectionPath: collectionPath,
            #documentId: documentId,
            #objectMapper: objectMapper,
          },
        ),
        returnValue: _i3.Future<T?>.value(),
        returnValueForMissingStub: _i3.Future<T?>.value(),
      ) as _i3.Future<T?>);
  @override
  _i3.Stream<T?> streamDocument<T>({
    required String? collectionPath,
    required String? documentId,
    required _i2.ObjectMapper<T>? objectMapper,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamDocument,
          [],
          {
            #collectionPath: collectionPath,
            #documentId: documentId,
            #objectMapper: objectMapper,
          },
        ),
        returnValue: _i3.Stream<T?>.empty(),
        returnValueForMissingStub: _i3.Stream<T?>.empty(),
      ) as _i3.Stream<T?>);
  @override
  _i3.Stream<List<T>> streamCollection<T>({
    required String? collectionPath,
    required _i2.ObjectMapper<T>? objectMapper,
    String? field,
    dynamic isEqualToValue,
    dynamic arrayContainsValue,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamCollection,
          [],
          {
            #collectionPath: collectionPath,
            #objectMapper: objectMapper,
            #field: field,
            #isEqualToValue: isEqualToValue,
            #arrayContainsValue: arrayContainsValue,
          },
        ),
        returnValue: _i3.Stream<List<T>>.empty(),
        returnValueForMissingStub: _i3.Stream<List<T>>.empty(),
      ) as _i3.Stream<List<T>>);
}
