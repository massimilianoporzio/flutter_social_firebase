// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_social_firebase/test/src/shared/presentation/blocs/app/app_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_social_firebase/src/features/auth/domain/entities/auth_user.dart'
    as _i6;
import 'package:flutter_social_firebase/src/features/auth/domain/repositories/auth_repository.dart'
    as _i2;
import 'package:flutter_social_firebase/src/features/auth/domain/usecases/sign_out_usecase.dart'
    as _i9;
import 'package:flutter_social_firebase/src/features/auth/domain/usecases/stream_auth_user_usecase.dart'
    as _i4;
import 'package:flutter_social_firebase/src/features/theme/domain/entities/custom_theme.dart'
    as _i8;
import 'package:flutter_social_firebase/src/features/theme/domain/repositories/theme_repository.dart'
    as _i3;
import 'package:flutter_social_firebase/src/features/theme/domain/usecases/stream_theme_usecase.dart'
    as _i7;
import 'package:flutter_social_firebase/src/features/theme/domain/usecases/switch_theme_usecase.dart'
    as _i11;
import 'package:flutter_social_firebase/src/shared/domain/usecases/base_usecase.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRepository_0 extends _i1.SmartFake
    implements _i2.AuthRepository {
  _FakeAuthRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeThemeRepository_1 extends _i1.SmartFake
    implements _i3.ThemeRepository {
  _FakeThemeRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StreamAuthUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamAuthUserUseCase extends _i1.Mock
    implements _i4.StreamAuthUserUseCase {
  @override
  _i2.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
        returnValueForMissingStub: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i2.AuthRepository);
  @override
  _i5.Stream<_i6.AuthUser> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Stream<_i6.AuthUser>.empty(),
        returnValueForMissingStub: _i5.Stream<_i6.AuthUser>.empty(),
      ) as _i5.Stream<_i6.AuthUser>);
}

/// A class which mocks [StreamThemeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamThemeUseCase extends _i1.Mock
    implements _i7.StreamThemeUseCase {
  @override
  _i3.ThemeRepository get themeRepository => (super.noSuchMethod(
        Invocation.getter(#themeRepository),
        returnValue: _FakeThemeRepository_1(
          this,
          Invocation.getter(#themeRepository),
        ),
        returnValueForMissingStub: _FakeThemeRepository_1(
          this,
          Invocation.getter(#themeRepository),
        ),
      ) as _i3.ThemeRepository);
  @override
  _i5.Stream<_i8.CustomTheme> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Stream<_i8.CustomTheme>.empty(),
        returnValueForMissingStub: _i5.Stream<_i8.CustomTheme>.empty(),
      ) as _i5.Stream<_i8.CustomTheme>);
}

/// A class which mocks [SignOutUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignOutUseCase extends _i1.Mock implements _i9.SignOutUseCase {
  @override
  _i2.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
        returnValueForMissingStub: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i2.AuthRepository);
  @override
  _i5.Future<void> call(_i10.NoParams? params) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [SwitchThemeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSwitchThemeUseCase extends _i1.Mock
    implements _i11.SwitchThemeUseCase {
  @override
  _i3.ThemeRepository get themeRepository => (super.noSuchMethod(
        Invocation.getter(#themeRepository),
        returnValue: _FakeThemeRepository_1(
          this,
          Invocation.getter(#themeRepository),
        ),
        returnValueForMissingStub: _FakeThemeRepository_1(
          this,
          Invocation.getter(#themeRepository),
        ),
      ) as _i3.ThemeRepository);
  @override
  _i5.FutureOr<void> call(_i11.SwitchThemeParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValueForMissingStub: null,
      ) as _i5.FutureOr<void>);
}
